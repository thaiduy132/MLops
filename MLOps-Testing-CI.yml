# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool: 
  name: my-agent-pool

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo $(System.DefaultWorkingDirectory)
    echo '$(System.DefaultWorkingDirectory)\package_requirement'
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.6'
    architecture: 'x64'
# Command Line v2
# Run a command line script using Bash on Linux and macOS and cmd.exe on Windows.
- task: CmdLine@2
  inputs:
    script: 
      echo "Structure of work folder of this pipeline:"
      tree $(Agent.WorkFolder)\1 /f
      echo "Build.ArtifactStagingDirectory:" 
      echo "$(Build.ArtifactStagingDirectory)"
      echo "Build.BinariesDirectory:" 
      echo "$(Build.BinariesDirectory)"
      echo "Build.SourcesDirectory:"
      echo "$(Build.SourcesDirectory)"
     


- task:  PowerShell@2
  inputs:
   filePath: "$(Build.SourcesDirectory)/package_requirement/install_requirements.ps1"

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: 'pytest training/train_test.py --doctest-modules --junitxml=junit/test-results.xml  --cov-report=xml --cov-report=html'

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/test-*.xml'


- task: AzureCLI@2
  inputs:
    azureSubscription: 'azure-resource-connection'
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: 'az extension add -n azure-cli-ml'

- task: AzureCLI@2
  inputs:
    azureSubscription: 'azure-resource-connection'
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: 'az ml workspace create -g $(azureml.resourceGroup) -w $(azureml.workspaceName) -l $(azureml.location) --exist-ok --yes'

- task: AzureCLI@2
  inputs:
    azureSubscription: 'azure-resource-connection'
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: 'az ml computetarget create amlcompute -g $(azureml.resourceGroup) -w $(azureml.workspaceName) -n $(amlcompute.clusterName) -s $(amlcompute.vmSize) --min-nodes $(amlcompute.minNodes) --max-node $(amlcompute.maxNodes) --idle-seconds-before-scaledown $(amlcompute.idleSecondsBeforeScaledown)'
  displayName: 'Azure ml compute cluster'

- task: AzureCLI@2
  inputs:
    azureSubscription: 'azure-resource-connection'
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: 'az ml datastore upload -w $(azureml.workspaceName) -g $(azureml.resourceGroup) -n $(az ml datastore show-default -w $(azureml.workspaceName) -g $(azureml.resourceGroup) --query name -o tsv) -p data -u insurance --overwrite true'
  displayName: 'Upload data to datastore'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      New-Item -ItemType Directory -Path .\metadata
      New-Item -ItemType Directory -Path .\models

- task: AzureCLI@2
  inputs:
    azureSubscription: 'azure-resource-connection'
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: az ml run submit-script -g $(azureml.resourceGroup) -w $(azureml.workspaceName) -e $(experiment.name) --ct $(amlcompute.clusterName) -d conda_dependencies.yml -c train_insurance -t ../metadata/run.json train_aml.py
    workingDirectory: 'training' 
  displayName: 'Training model'

- task: AzureCLI@2
  inputs:
    azureSubscription: 'azure-resource-connection'
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: 'az ml model register -g $(azureml.resourceGroup) -w $(azureml.workspaceName) -n $(model.name) -f metadata/run.json --asset-path outputs/models/insurance_model.pkl -d "Classification model for filling a claim prediction" --tag "data=insurance" --tag "model=classification" --model-framework ScikitLearn -t metadata/model.json'
  displayName: 'Registering model'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Create a directory for jq
      $jqDir = "C:\jq"
      New-Item -ItemType Directory -Path $jqDir -Force
      
      # Download jq executable
      $jqUrl = "https://github.com/stedolan/jq/releases/download/jq-1.6/jq-win64.exe"
      $jqExePath = Join-Path $jqDir "jq.exe"
      Invoke-WebRequest -Uri $jqUrl -OutFile $jqExePath
      
      # Add the directory to the PATH
      $env:Path = $env:Path + ";$jqDir"
      
      # Verify jq installation
      jq --version
  displayName: 'Install jq'
- task: AzureCLI@2
  inputs:
    azureSubscription: 'azure-resource-connection'
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Đọc nội dung từ tệp JSON và trích xuất modelId
      $modelId = (Get-Content -Raw -Path .\metadata\model.json | ConvertFrom-Json).modelId
      
      # Sử dụng Azure CLI để đăng ký mô hình
      az ml model download -g $(azureml.resourceGroup) -w $(azureml.workspaceName) -i $modelId -t ./model --overwrite
  displayName: 'Downloading model'

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    Contents: |
      **/metadata/*
      **/models/*
      **/deployment/*
      **/tests/integration/*
      **/package_requirement/*
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'
    artifact: 'landing'
    publishLocation: 'pipeline'